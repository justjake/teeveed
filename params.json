{"name":"teeveed","tagline":"Natural language interface for your media center","body":"# teeveed\r\n\r\nnatural language daemon for the media center.\r\n\r\nA winter break project (12/28/13 - 1/10/14) by [@jitl](https://twitter.com/@jitl)\r\n\r\n## Development\r\n\r\n#### Current Tasks\r\n\r\n1.  Switching from `DataMapper` to `Sequel` for our ruby-hipster ORM.\r\n    DataMapper does too much work that keeps us from raw SQL, which\r\n    we need to implement trigram-based text matching\r\n\r\n2.  Use the JavaFX entry point. Right now teeveed boots from\r\n    `jar-bootstrap.rb` via JRuby's `org.jruby.JarBootstrapMain`.\r\n    We need to use a JavaFX main to use JavaFX bundling tools\r\n    and eliminate dependence on\r\n    `mvn com.zenjava:javafx-maven-plugin:2.0:fix-classpath`\r\n    for deployment\r\n\r\n3.  Switch from JRuby-based JIT compiling to AOT compiling.\r\n    teeveed boots really, really slowley, and that's because\r\n    there's a lot of JIT happening when the jar is loaded.\r\n    Maybe things would go faster if we pre-compiled teeveed\r\n    (and its gems).\r\n\r\n#### Requirements\r\n\r\n- Java JDK 1.7\r\n- Maven 2+\r\n- JRuby 1.7.x\r\n- PostgreSQL 9.1+ *with* the `pg_trgm` extension! **pg_trgm** is one\r\n  of the ways we find similar-text matches\r\n\r\nteeveed uses [gem-maven-plugin][gem] instead of `Bundler` to manage\r\nrequirements. See `pom.xml` for more information.\r\n\r\n#### Get Hacking\r\n\r\n1. `git clone https://github.com/justjake/teeveed` or similar to get the source\r\n2. `cd teeveed`, `mvn initialize` will download and install the required rubygems\r\n   in `teeveed/target/rubygems`\r\n3. `source env.sh` will correct your `$GEM_HOME` and `$RUBY_LIB` environment variables\r\n   to point to the gems installed in `teeveed/target/rubygems` and the teeveed sources.\r\n4. Hack away. run `teeveed` (alias provided by env.sh) to start the daemon, or\r\n   `cli` to start the Pry command line.\r\n\r\nIf things feel too slow,\r\nYou should get [drip](https://github.com/flatland/drip) in your ~/bin,\r\nand then `source drip.env.sh` before launching any of this ruby junk.\r\nDrip'll put the spring back in your step!\r\n\r\n## Installation\r\n\r\n#### Requirements\r\n\r\n- Java JDK 1.7\r\n- Maven 2+ (for HUD)\r\n- a Postgres database\r\n\r\nThe only reason we need Maven and the JDK is because (right now)\r\nteeveed isn't packaged as a JavaFX runtime app. Because the JavaFX\r\nruntime does some interesting [native loading things][javafx-oops],\r\nthe simplest way is just to move the JavaFX libraries into the\r\nimplicit system classpath.\r\n\r\nI will get around to fixing this, but it's low priority for my own\r\nmachines.\r\n\r\n#### Instructions\r\n\r\n1. `(sudo) mvn com.zenjava:javafx-maven-plugin:2.0:fix-classpath`\r\n\r\n   This moves JavaFX onto the classpath so the JavaFX libraries are\r\n   always loaded. **THIS STEP IS ONLY REQUIRED ON USER-INTERFACE MACHINES**\r\n\r\n1.  make a directory for all of the teeveed resources. I like `~/teeveed`.\r\n1.  copy `teeveed-0.2.2.jar` and `example.teeveed.conf.rb` into\r\n    your teeveed folder.\r\n1.  copy `teeveed.sh` into your `~/bin` or somewhere else on your path,\r\n    and modify `$TEEVEED_HOME` in it to point to your teeveed folder.\r\n1.  Create a Postgres database and user for teeveed. Make sure your\r\n    postgres instance is accessable over TCP (unencrypted)\r\n1.  Change `example.teeveed.conf.rb` so that it matches your setup.\r\n    Important things to change:\r\n\r\n    - `database` command to match the setup of your Postgres database\r\n    - `library` command's path should be '/path/to/your/media'\r\n    - You'll need to insert your Wit.ai token for the `teeveed` instance\r\n\r\n[javafx-oops]: http://zenjava.com/javafx/maven/fix-classpath.html\r\n[gem]: https://github.com/torquebox/jruby-maven-plugins#installing-gems-into-you-project-directory\r\n\r\n## Goals\r\n\r\n#### Index\r\n\r\n- Keep a fast index of all the media on a share for quick search (DONE)\r\n- index needs to respond to natural-language searches (DONE)\r\n    - few spelling mistakes, mostly word transpositions (TODO: switch to trigram)\r\n- deleted items should be pruned regularly (DONE)\r\n- delegte music indexing and search to Spotify (TODO)\r\n\r\n##### Strategy\r\n\r\nThe index is stored in a PostgeSQL database, which gets us nice\r\nfull-text-search for free. Indexing is performed by crawling each\r\nlibrary section on a specified schedule, and adding new items, and\r\nremoving old items based on a `last_seen` timestamp.\r\n\r\nAt some point we should use the following algorithm when returning\r\nsearch results, so that we never return a file that doesn't exist:\r\n\r\n```ruby\r\n# Array<Media> returned in ranked order from best to worst match\r\nresults = root.search(:title => \"the good the bad the ugly\", :sense => :watch)\r\nresults.each do |hit|\r\n    path = Pathname.new(root.path) + hit.relative_path\r\n    if not path.exist?\r\n        hit.delete!\r\n        next\r\n    end\r\n\r\n    path = path.realpath.to_s\r\n    return Result.new(hit, path)\r\nend\r\n```\r\n\r\n#### Natural Language Interface\r\n\r\n- User story: you sit down on the couch and say,\r\n  \"Ok tv. do we have the new Game of Thrones?\"\r\n\r\n- User story: you want to quickly start music playing while\r\n  in the kitchen. \"Ok tv. Play songs by Royksopp\"\r\n\r\nWe use [**Wit.ai**](http://wit.ai) to interpret user intents from plain\r\ntext. Intent behavior is defined in `lib/teevee/daemon/intent_controller.rb`,\r\nwhich performs dispatch based on intent type.\r\n\r\n#### Visual indicators (DONE)\r\n\r\nteeveed uses a simple JavaFX window to display user intents and\r\nmatched entities on-screen. All intents are automatically\r\ndisplayed before they are handled, and the results of the handler\r\n(anything with a :friendly_name) function are displayed when the\r\nhandler completes.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}